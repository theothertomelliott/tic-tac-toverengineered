/**
 * Tic Tac Toe
 * An API for games of Tic Tac Toe
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: tom.w.elliott@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import Grid from '../model/Grid';
import Match from '../model/Match';
import MatchPair from '../model/MatchPair';
import MatchPending from '../model/MatchPending';
import Winner from '../model/Winner';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the currentPlayer operation.
     * @callback module:api/DefaultApi~currentPlayerCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the current player for a game
     * @param {String} game ID of game
     * @param {module:api/DefaultApi~currentPlayerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    currentPlayer(game, callback) {
      let postBody = null;
      // verify the required parameter 'game' is set
      if (game === undefined || game === null) {
        throw new Error("Missing the required parameter 'game' when calling currentPlayer");
      }

      let pathParams = {
        'game': game
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/{game}/player/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameGrid operation.
     * @callback module:api/DefaultApi~gameGridCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Grid} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the grid state for a game
     * @param {String} game ID of game
     * @param {module:api/DefaultApi~gameGridCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Grid}
     */
    gameGrid(game, callback) {
      let postBody = null;
      // verify the required parameter 'game' is set
      if (game === undefined || game === null) {
        throw new Error("Missing the required parameter 'game' when calling gameGrid");
      }

      let pathParams = {
        'game': game
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Grid;
      return this.apiClient.callApi(
        '/{game}/grid', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the index operation.
     * @callback module:api/DefaultApi~indexCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of game IDs
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset starting offset for results
     * @param {Number} opts.max maximum number of results to return
     * @param {module:api/DefaultApi~indexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    index(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'max': opts['max']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the matchStatus operation.
     * @callback module:api/DefaultApi~matchStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Match} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get status of a match request
     * @param {String} requestID ID of match request to be checked
     * @param {module:api/DefaultApi~matchStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Match}
     */
    matchStatus(requestID, callback) {
      let postBody = null;
      // verify the required parameter 'requestID' is set
      if (requestID === undefined || requestID === null) {
        throw new Error("Missing the required parameter 'requestID' when calling matchStatus");
      }

      let pathParams = {
      };
      let queryParams = {
        'requestID': requestID
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Match;
      return this.apiClient.callApi(
        '/match', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the play operation.
     * @callback module:api/DefaultApi~playCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Make a move in a game
     * @param {String} game ID of game
     * @param {String} token token of player making move
     * @param {Number} i column in grid
     * @param {Number} j row in grid
     * @param {module:api/DefaultApi~playCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    play(game, token, i, j, callback) {
      let postBody = null;
      // verify the required parameter 'game' is set
      if (game === undefined || game === null) {
        throw new Error("Missing the required parameter 'game' when calling play");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling play");
      }
      // verify the required parameter 'i' is set
      if (i === undefined || i === null) {
        throw new Error("Missing the required parameter 'i' when calling play");
      }
      // verify the required parameter 'j' is set
      if (j === undefined || j === null) {
        throw new Error("Missing the required parameter 'j' when calling play");
      }

      let pathParams = {
        'game': game
      };
      let queryParams = {
        'token': token,
        'i': i,
        'j': j
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/{game}/play', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestMatch operation.
     * @callback module:api/DefaultApi~requestMatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MatchPending} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request a new /match
     * @param {module:api/DefaultApi~requestMatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MatchPending}
     */
    requestMatch(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MatchPending;
      return this.apiClient.callApi(
        '/match', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestMatchPair operation.
     * @callback module:api/DefaultApi~requestMatchPairCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MatchPair} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request matches for both players in a game, to be used for one-player games.
     * @param {module:api/DefaultApi~requestMatchPairCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MatchPair}
     */
    requestMatchPair(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MatchPair;
      return this.apiClient.callApi(
        '/match/pair', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the winner operation.
     * @callback module:api/DefaultApi~winnerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Winner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the winner, if any for a game
     * @param {String} game ID of game
     * @param {module:api/DefaultApi~winnerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Winner}
     */
    winner(game, callback) {
      let postBody = null;
      // verify the required parameter 'game' is set
      if (game === undefined || game === null) {
        throw new Error("Missing the required parameter 'game' when calling winner");
      }

      let pathParams = {
        'game': game
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Winner;
      return this.apiClient.callApi(
        '/{game}/winner', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
